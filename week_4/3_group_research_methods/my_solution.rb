# U2.W4: Research Methods

i_want_pets = ["I", "want", 4, "pets", "but", "I", "only", "have", 3]
my_family_pets_ages = {"Evi" => 6, "Hoobie" => 3, "George" => 12, "Bogart" => 4, "Poly" => 4, 
            "Annabelle" => 0, "Ditto" => 3}

# Person 1's solution
def my_array_finding_method(source, thing_to_find)
  # Your code here!
end

def my_hash_finding_method(source, thing_to_find)
  # Your code here!
end

# Identify and describe the ruby method you implemented. 
# 
#
#

# Person 2
def my_array_modification_method(source, thing_to_modify)
  # Your code here!
end

def my_hash_modification_method(source, thing_to_modify)
  # Your code here!
end

# Identify and describe the ruby method you implemented. 
# 
#
#


# Person 3
def my_array_sorting_method(source)
  sortedArray = source.sort_by { |a| a.to_s }
  return sortedArray.uniq!
 end

def my_hash_sorting_method(source)
  sortedHash = source.sort_by { |name,age| age }
  return sortedHash
end

# Identify and describe the ruby method you implemented. 
# 
#
#


# Person 4
def my_array_deletion_method(source, thing_to_delete)
  #Your code here!
end

def my_hash_deletion_method(source, thing_to_delete)
  #Your code here!
end

# Identify and describe the ruby method you implemented. 
# 
#
#


################## DRIVER CODE ###################################
# HINT: Use `puts` statements to see if you are altering the original structure with these methods. 
# Each of these should return `true` if they are implemented properly.

puts my_array_sorting_method(i_want_pets)
puts ["3", "4", "I", "but", "have", "only", "pets", "want"]
puts my_hash_sorting_method(my_family_pets_ages)


p my_array_finding_method(i_want_pets, "t") == ["want","pets","but"]
p my_hash_finding_method(my_family_pets_ages, 3) == ["Hoobie", "Ditto"]
p my_array_modification_method(i_want_pets, 1) == ["I", "want", 4, "pets", "but", "I", "only", "have", 3 ]
p my_hash_modification_method(my_family_pets_ages, 2) == {"Evi" => 8, "Hoobie" => 5, "George" => 14, "Bogart" => 6, "Poly" => 6, "Annabelle" => 2, "Ditto" => 5}
p my_array_sorting_method(i_want_pets) == ["3", "4", "I", "but", "have", "only", "pets", "want"]
p my_hash_sorting_method(my_family_pets_ages) == [["Annabelle", 2], ["Ditto", 5], ["Hoobie", 5], ["Bogart", 6], ["Poly", 6], ["Evi", 8], ["George", 14]] 
# This may be false depending on how your method deals with ordering the animals with the same ages.
p my_array_deletion_method(i_want_pets, "a") == ["I", 4, "pets", "but", "I", "only", 3 ]
p my_hash_deletion_method(my_family_pets_ages, "George") == {"Evi" => 8, "Hoobie" => 5, "Bogart" => 6, "Poly" => 6, "Annabelle" => 2, "Ditto" => 5}

# Reflect!
# 
# I was person 3 for this challenge and for my section I used the enumerable 
# sort_by method. The original built-in sort method falls short for both parts of my challenge.
# When sorting the first array, this method cannot distinguish between integers and strings.
# When sorting the hash, this method sorts by the keys of the hash, not their values. 
# 
# The enumerable sort_by method solved both of these problems becuase you are able to pass
# it a block of code manipulate the array/hash during the sorting process. Ruby Docs explains
# it like this: "Sorts enum using a set of keys generated by mapping the values in enum through
# the given block". The sort_by method first puts your input into a new array based on the 
# block you pass it, and then sorts this new array.
#
# For the first method, I passed a block of code that updated all array elements to string objects
# before sorting. For the second method, I passed a block of code that defined the key/value relationship
# and specified sorting by the values. 
#
# As it turns out, using the sort_by method can have another big advantage over the sort method - speed. 
# When sorting complex data, manipulating the data into an interim array can cut down on the amount of 
# calculations that need to be made. This article explains it well:
# 
# http://gayleforce.wordpress.com/2009/09/28/ruby-sorting-1-when-and-why-to-use-sort_by/
# 
# My solutions did not pass the driver code (yet), but I don't expect them to until my code is combined
# with the rest of my group. I used puts statements to output my code and compare manually, and the
# methods seem to be working correctly. The Hash function may never pass, becuase the order of
# pets with the same age is slightly different.
#
# Some other resources I found on enumerables: 
#
# http://www.slideshare.net/harisamin/the-enumerable-module-or-how-i-fell-in-love-with-ruby
# http://jamesgolick.com/2008/1/5/an-introduction-to-ruby-s-enumerable-module.html
# http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/44-collections/lessons/96-enumerators-and-enumerables